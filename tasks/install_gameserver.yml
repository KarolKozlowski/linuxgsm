---
# install gameserver
- name: "Set {{ gameserver }} user variables"
  set_fact:
    gameserver_user: "{{ gameserver }}"
    gameserver_home: "{{ linuxgsm_home }}-{{ gameserver }}"
- name: "Create {{ gameserver }} user"
  user:
    name: "{{ gameserver }}"
    group: "{{ linuxgsm_user }}"
    home: "{{ gameserver_home }}"
    password: '!'
- block:
  - name: "Copy LinuxGSM bootstrap"
    copy:
      src: "{{ linuxgsm_home }}/{{ linuxgsm_bin }}"
      dest: "{{ gameserver_home }}/{{ linuxgsm_bin }}"
      owner: "{{ gameserver }}"
      mode: 0755
      remote_src: true
  - name: "Set {{ gameserver }} config variable"
    set_fact:
      gameserver_config: '{{ linuxgsm_gameserver_config[gameserver] | default({}) }}'
  - name: "Download {{ gameserver }}"
    command:
      cmd: "{{ gameserver_home }}/{{ linuxgsm_bin }} {{ gameserver }}"
    args:
      chdir: "{{ gameserver_home }}"
      creates: "{{ gameserver_home }}/{{ gameserver }}"
  - name: "Install {{ gameserver }}"
    command:
      cmd: "{{ gameserver_home }}/{{ gameserver }} auto-install"
    args:
      chdir: "{{ gameserver_home }}"
  - name: "Configure {{ gameserver }} instance"
    template:
      src: "gameserver.cfg.j2"
      dest: "{{ gameserver_home }}/lgsm/config-lgsm/{{ gameserver }}/{{ gameserver }}.cfg"
  - name: "Run additional commands on {{ gameserver }}"
    command:
      cmd: "{{ gameserver_home }}/{{ gameserver }} {{ item }}"
    args:
      chdir: "{{ gameserver_home }}"
    with_items: "{{ gameserver_config['additional_commands'] | default([]) }}"
  - name: "Include {{ gameserver }} specific tasks"
    include_tasks: "{{ gameserver }}.yml"
    with_first_found:
     - files:
        - "{{ gameserver }}.yml"
       skip: true
  become: true
  become_user: "{{ gameserver_user }}"
- name: "Configure systemd service"
  template:
    src: "gameserver.service.j2"
    dest: "/etc/systemd/system/{{ gameserver }}.service"
- name: "Enable systemd service"
  systemd:
    name: "{{ gameserver }}.service"
    state: started
    enabled: yes
    daemon_reload: yes
- name: "Restart {{ gameserver}}"
  service:
    name: "{{ gameserver }}"
    state: restarted
- name: "Enable firewall for {{ gameserver }}"
  firewalld:
    port: "{{ item }}"
    permanent: yes
    state: enabled
  with_items: "{{ gameserver_config['firewall'] | default([]) }}"
  when: gameserver_config['firewall'] is iterable
  notify: firewalld reload

